<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shuxin.mapper.MIDiagnosisMapper" >
 <resultMap id="MIDiagnosisResultMap" type="java.util.Map">
    
       <result column="id" property="id" jdbcType="VARCHAR"/>
        <result column="diagnosis_code" property="diagnosisCode" jdbcType="VARCHAR"/>
        <result column="diagnosis_name" property="diagnosisName" jdbcType="VARCHAR"/>
        <result column="adaption_package_code" property="adaptionPackageCode" jdbcType="VARCHAR"/>
        
        <result column="message" property="message" jdbcType="VARCHAR"/>
        <result column="update_time" property="updateTime" jdbcType="VARCHAR"/>
        <result column="update_user" property="updateUser" jdbcType="VARCHAR"/>
          <result column="opt_type" property="optType" jdbcType="VARCHAR"/>
 </resultMap>
 <select id="findmiDiagnosisMapperDataGrid" resultMap="MIDiagnosisResultMap"    >
   SELECT
        t.id ,
        t.diagnosis_code  ,
        t.diagnosis_name ,
        t.adaption_package_code,  
        t.message,
        t.update_time,  
        t.update_user
 

        FROM
        T_MIDIAGNOSIS t
   
        <where>
            <if test=" diagnosisName!= null and diagnosisName != '' ">
                   t.diagnosis_name like '%${diagnosisName}%'
            </if>   
            <if test=" diagnosisCode != null and diagnosisCode != '' ">
               and  t.diagnosis_code like '%${diagnosisCode}%'
            </if>
           
        </where>
      order by update_time desc,diagnosis_code 
  </select> 

   <insert id="addMIDiagnosisHistory">
   		insert into t_midiagnosis_opt (ID ,DIAGNOSIS_CODE,adaption_package_code,DIAGNOSIS_NAME,message,CREATE_TIME,CREATE_USER,UPDATE_TIME,UPDATE_USER,opt_type)
   		select ID ,DIAGNOSIS_CODE,adaption_package_code,DIAGNOSIS_NAME,message,sysdate,#{loginName},sysdate,#{loginName},#{optType} from T_MIDIAGNOSIS
   		where id=#{id}
   </insert>
   
   <select id="selectDetailMIDiagnosis" resultMap="MIDiagnosisResultMap" >
     SELECT
        t.id ,
        t.diagnosis_code  ,
        t.diagnosis_name ,
        t.adaption_package_code,  
        t.message,
         to_char(t.update_time,'yyyy-mm-dd hh24:mi:ss') update_time,
        t.update_user
 

        FROM
       T_MIDIAGNOSIS t
        
        order by  t.update_time desc,t.diagnosis_code
   
   </select>
   <select id="selectMIDiagnosisHistory" resultMap="MIDiagnosisResultMap" >
     SELECT
        t.id ,
        t.diagnosis_code  ,
        t.diagnosis_name ,
        t.adaption_package_code,  
        t.message,
        to_char(t.update_time,'yyyy-mm-dd hh24:mi:ss') update_time,
        t.update_user,
         t.opt_type
       
        FROM
        t_midiagnosis_opt t
        
        order by  t.update_time desc,t.diagnosis_code
   
   </select>
      <update id="daoruData">
	begin
		<foreach collection="list" item="option" index="index" >
		    insert into t_midiagnosis_opt (id,diagnosis_code,adaption_package_code,diagnosis_name,message,opt_type,create_time,create_user,update_time,update_user)
			select id,diagnosis_code,adaption_package_code,diagnosis_name,message,'导入更新' opt_type, sysdate create_time,#{loginName} create_user,sysdate update_time,#{loginName} update_user
			from  t_midiagnosis where diagnosis_code =#{option.field0} and adaption_package_code=#{option.field1};
			
            insert into t_midiagnosis_opt(id,diagnosis_code,adaption_package_code,diagnosis_name,message,opt_type,create_time,create_user,update_time,update_user)
            select id,diagnosis_code,adaption_package_code,diagnosis_name,message,'导入新增' opt_type,sysdate create_time,#{loginName} create_user,sysdate update_time,#{loginName} update_user from
            (select #{option.field4} id, #{option.field0} diagnosis_code,#{option.field1} adaption_package_code,
            #{option.field2}  diagnosis_name, #{option.field3}  message from dual) t where not exists
			(select 1 from t_midiagnosis t1 where t1.diagnosis_code=t.diagnosis_code and t1.adaption_package_code=t.adaption_package_code);
            
            merge into t_midiagnosis t1
            using (select #{option.field0} diagnosis_code,#{option.field1} adaption_package_code,
            #{option.field2}  diagnosis_name, #{option.field3}  message from dual) t2
            on (t1.diagnosis_code=t2.diagnosis_code and t1.adaption_package_code=t2.adaption_package_code)
            WHEN MATCHED THEN
               update set t1.diagnosis_name=t2.diagnosis_name,t1.message=t2.message,
                        t1.update_time=sysdate,t1.update_user=#{loginName}
            WHEN NOT MATCHED THEN
               insert (id,diagnosis_code,adaption_package_code,diagnosis_name,message,create_time,create_user,update_time,update_user)
               VALUES
              (#{option.field4},#{option.field0},#{option.field1},#{option.field2},#{option.field3},sysdate,#{loginName},sysdate,#{loginName});
            
        </foreach>
	end;
</update>

<select id="selectAdaptionPackageCode" resultType="java.lang.String">
	select adaption_package_code from t_midiagnosis where
	diagnosis_code in
	<foreach item="diagnosisCode" index="index" collection="list" open="(" separator="," close=")">  
            #{diagnosisCode}
     </foreach>
     and adaption_package_code like 'A%'
</select>

<select id="selectBZ31DiagnosisCodeCount" resultType="java.lang.Integer">
select count(1) from t_midiagnosis t 
where t.adaption_package_code = 'BZ31' 
and t.diagnosis_code in 
<foreach item="diagnosisCode" index="index" collection="list" open="(" separator="," close=")">  
       #{diagnosisCode}
</foreach>

</select>

<select id="selectBZ31DiagnosisCodeInfo" resultType="java.lang.String">
 		select t.diagnosis_code from t_midiagnosis t 
where t.adaption_package_code = 'BZ31' 
and t.diagnosis_code in 
<foreach item="diagnosisCode" index="index" collection="list" open="(" separator="," close=")">  
       #{diagnosisCode}
</foreach>
</select>



</mapper>